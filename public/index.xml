<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>THIYANGA TALAGALA on THIYANGA TALAGALA</title>
    <link>/</link>
    <description>Recent content in THIYANGA TALAGALA on THIYANGA TALAGALA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Thiyanga S Talagala</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Some useful Greek letters you might use on your reports</title>
      <link>/post/greekletters/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/greekletters/</guid>
      <description>&lt;table&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;alpha&lt;/strong&gt;:&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;beta&lt;/strong&gt;:&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;gamma&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;delta&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;\alpha&lt;/code&gt; : &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\beta&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\gamma&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\delta&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\delta\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\Gamma&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\Gamma\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\Delta&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\Delta\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;epsilon&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Zeta&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;eta&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;theta&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;\epsilon&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\zeta&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\zeta\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\eta&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\eta\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\theta&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;\varepsilon&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\varepsilon\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\Theta&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;iota&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;kappa&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;lambda&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mu&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;\iota&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\iota\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\kappa:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\kappa\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\lambda:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\mu:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;nu&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;xi&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;pi&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;rho&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;\nu:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\nu\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\xi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\xi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\pi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\pi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\rho:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\Xi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\Xi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\Pi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\Pi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;sigma&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;upsilon&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;phi&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;omicron&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;\sigma:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\upsilon:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\upsilon\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\phi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\phi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\omicron:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\omicron\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;\Sigma:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\Sigma\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\Phi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\Phi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;tau&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;chi&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;psi&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Omega&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;\tau:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\tau\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\chi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\chi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\psi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\psi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\omega:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\omega\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\Psi:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\Psi\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\Omega:&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\Omega\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s in a package?</title>
      <link>/post/packageinfo/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/packageinfo/</guid>
      <description>&lt;p&gt;Sometimes we need to view all the functions that are built into an R package. This is done in the same way you would list variables in your workspace, using the &lt;code&gt;ls&lt;/code&gt; function. Note that the package must be loaded before you run the &lt;code&gt;ls&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Getting a list of functions inside the &lt;code&gt;dplyr&lt;/code&gt; package&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
ls(&amp;quot;package:dplyr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;%&amp;gt;%&amp;quot;                &amp;quot;add_count&amp;quot;          &amp;quot;add_count_&amp;quot;        
##   [4] &amp;quot;add_row&amp;quot;            &amp;quot;add_rownames&amp;quot;       &amp;quot;add_tally&amp;quot;         
##   [7] &amp;quot;add_tally_&amp;quot;         &amp;quot;all_equal&amp;quot;          &amp;quot;all_vars&amp;quot;          
##  [10] &amp;quot;anti_join&amp;quot;          &amp;quot;any_vars&amp;quot;           &amp;quot;arrange&amp;quot;           
##  [13] &amp;quot;arrange_&amp;quot;           &amp;quot;arrange_all&amp;quot;        &amp;quot;arrange_at&amp;quot;        
##  [16] &amp;quot;arrange_if&amp;quot;         &amp;quot;as.tbl&amp;quot;             &amp;quot;as.tbl_cube&amp;quot;       
##  [19] &amp;quot;as_data_frame&amp;quot;      &amp;quot;as_tibble&amp;quot;          &amp;quot;auto_copy&amp;quot;         
##  [22] &amp;quot;band_instruments&amp;quot;   &amp;quot;band_instruments2&amp;quot;  &amp;quot;band_members&amp;quot;      
##  [25] &amp;quot;bench_tbls&amp;quot;         &amp;quot;between&amp;quot;            &amp;quot;bind_cols&amp;quot;         
##  [28] &amp;quot;bind_rows&amp;quot;          &amp;quot;case_when&amp;quot;          &amp;quot;changes&amp;quot;           
##  [31] &amp;quot;check_dbplyr&amp;quot;       &amp;quot;coalesce&amp;quot;           &amp;quot;collapse&amp;quot;          
##  [34] &amp;quot;collect&amp;quot;            &amp;quot;combine&amp;quot;            &amp;quot;common_by&amp;quot;         
##  [37] &amp;quot;compare_tbls&amp;quot;       &amp;quot;compare_tbls2&amp;quot;      &amp;quot;compute&amp;quot;           
##  [40] &amp;quot;contains&amp;quot;           &amp;quot;copy_to&amp;quot;            &amp;quot;count&amp;quot;             
##  [43] &amp;quot;count_&amp;quot;             &amp;quot;cumall&amp;quot;             &amp;quot;cumany&amp;quot;            
##  [46] &amp;quot;cume_dist&amp;quot;          &amp;quot;cummean&amp;quot;            &amp;quot;current_vars&amp;quot;      
##  [49] &amp;quot;data_frame&amp;quot;         &amp;quot;data_frame_&amp;quot;        &amp;quot;db_analyze&amp;quot;        
##  [52] &amp;quot;db_begin&amp;quot;           &amp;quot;db_commit&amp;quot;          &amp;quot;db_create_index&amp;quot;   
##  [55] &amp;quot;db_create_indexes&amp;quot;  &amp;quot;db_create_table&amp;quot;    &amp;quot;db_data_type&amp;quot;      
##  [58] &amp;quot;db_desc&amp;quot;            &amp;quot;db_drop_table&amp;quot;      &amp;quot;db_explain&amp;quot;        
##  [61] &amp;quot;db_has_table&amp;quot;       &amp;quot;db_insert_into&amp;quot;     &amp;quot;db_list_tables&amp;quot;    
##  [64] &amp;quot;db_query_fields&amp;quot;    &amp;quot;db_query_rows&amp;quot;      &amp;quot;db_rollback&amp;quot;       
##  [67] &amp;quot;db_save_query&amp;quot;      &amp;quot;db_write_table&amp;quot;     &amp;quot;dense_rank&amp;quot;        
##  [70] &amp;quot;desc&amp;quot;               &amp;quot;dim_desc&amp;quot;           &amp;quot;distinct&amp;quot;          
##  [73] &amp;quot;distinct_&amp;quot;          &amp;quot;do&amp;quot;                 &amp;quot;do_&amp;quot;               
##  [76] &amp;quot;dr_dplyr&amp;quot;           &amp;quot;ends_with&amp;quot;          &amp;quot;enexpr&amp;quot;            
##  [79] &amp;quot;enexprs&amp;quot;            &amp;quot;enquo&amp;quot;              &amp;quot;enquos&amp;quot;            
##  [82] &amp;quot;ensym&amp;quot;              &amp;quot;ensyms&amp;quot;             &amp;quot;eval_tbls&amp;quot;         
##  [85] &amp;quot;eval_tbls2&amp;quot;         &amp;quot;everything&amp;quot;         &amp;quot;explain&amp;quot;           
##  [88] &amp;quot;expr&amp;quot;               &amp;quot;failwith&amp;quot;           &amp;quot;filter&amp;quot;            
##  [91] &amp;quot;filter_&amp;quot;            &amp;quot;filter_all&amp;quot;         &amp;quot;filter_at&amp;quot;         
##  [94] &amp;quot;filter_if&amp;quot;          &amp;quot;first&amp;quot;              &amp;quot;frame_data&amp;quot;        
##  [97] &amp;quot;full_join&amp;quot;          &amp;quot;funs&amp;quot;               &amp;quot;funs_&amp;quot;             
## [100] &amp;quot;glimpse&amp;quot;            &amp;quot;group_by&amp;quot;           &amp;quot;group_by_&amp;quot;         
## [103] &amp;quot;group_by_all&amp;quot;       &amp;quot;group_by_at&amp;quot;        &amp;quot;group_by_if&amp;quot;       
## [106] &amp;quot;group_by_prepare&amp;quot;   &amp;quot;group_indices&amp;quot;      &amp;quot;group_indices_&amp;quot;    
## [109] &amp;quot;group_size&amp;quot;         &amp;quot;group_vars&amp;quot;         &amp;quot;grouped_df&amp;quot;        
## [112] &amp;quot;groups&amp;quot;             &amp;quot;id&amp;quot;                 &amp;quot;ident&amp;quot;             
## [115] &amp;quot;if_else&amp;quot;            &amp;quot;inner_join&amp;quot;         &amp;quot;intersect&amp;quot;         
## [118] &amp;quot;is.grouped_df&amp;quot;      &amp;quot;is.src&amp;quot;             &amp;quot;is.tbl&amp;quot;            
## [121] &amp;quot;is_grouped_df&amp;quot;      &amp;quot;lag&amp;quot;                &amp;quot;last&amp;quot;              
## [124] &amp;quot;lead&amp;quot;               &amp;quot;left_join&amp;quot;          &amp;quot;location&amp;quot;          
## [127] &amp;quot;lst&amp;quot;                &amp;quot;lst_&amp;quot;               &amp;quot;make_tbl&amp;quot;          
## [130] &amp;quot;matches&amp;quot;            &amp;quot;min_rank&amp;quot;           &amp;quot;mutate&amp;quot;            
## [133] &amp;quot;mutate_&amp;quot;            &amp;quot;mutate_all&amp;quot;         &amp;quot;mutate_at&amp;quot;         
## [136] &amp;quot;mutate_each&amp;quot;        &amp;quot;mutate_each_&amp;quot;       &amp;quot;mutate_if&amp;quot;         
## [139] &amp;quot;n&amp;quot;                  &amp;quot;n_distinct&amp;quot;         &amp;quot;n_groups&amp;quot;          
## [142] &amp;quot;na_if&amp;quot;              &amp;quot;nasa&amp;quot;               &amp;quot;near&amp;quot;              
## [145] &amp;quot;nth&amp;quot;                &amp;quot;ntile&amp;quot;              &amp;quot;num_range&amp;quot;         
## [148] &amp;quot;one_of&amp;quot;             &amp;quot;order_by&amp;quot;           &amp;quot;percent_rank&amp;quot;      
## [151] &amp;quot;progress_estimated&amp;quot; &amp;quot;pull&amp;quot;               &amp;quot;quo&amp;quot;               
## [154] &amp;quot;quo_name&amp;quot;           &amp;quot;quos&amp;quot;               &amp;quot;rbind_all&amp;quot;         
## [157] &amp;quot;rbind_list&amp;quot;         &amp;quot;recode&amp;quot;             &amp;quot;recode_factor&amp;quot;     
## [160] &amp;quot;rename&amp;quot;             &amp;quot;rename_&amp;quot;            &amp;quot;rename_all&amp;quot;        
## [163] &amp;quot;rename_at&amp;quot;          &amp;quot;rename_if&amp;quot;          &amp;quot;rename_vars&amp;quot;       
## [166] &amp;quot;rename_vars_&amp;quot;       &amp;quot;right_join&amp;quot;         &amp;quot;row_number&amp;quot;        
## [169] &amp;quot;rowwise&amp;quot;            &amp;quot;same_src&amp;quot;           &amp;quot;sample_frac&amp;quot;       
## [172] &amp;quot;sample_n&amp;quot;           &amp;quot;select&amp;quot;             &amp;quot;select_&amp;quot;           
## [175] &amp;quot;select_all&amp;quot;         &amp;quot;select_at&amp;quot;          &amp;quot;select_if&amp;quot;         
## [178] &amp;quot;select_var&amp;quot;         &amp;quot;select_vars&amp;quot;        &amp;quot;select_vars_&amp;quot;      
## [181] &amp;quot;semi_join&amp;quot;          &amp;quot;setdiff&amp;quot;            &amp;quot;setequal&amp;quot;          
## [184] &amp;quot;show_query&amp;quot;         &amp;quot;slice&amp;quot;              &amp;quot;slice_&amp;quot;            
## [187] &amp;quot;sql&amp;quot;                &amp;quot;sql_escape_ident&amp;quot;   &amp;quot;sql_escape_string&amp;quot; 
## [190] &amp;quot;sql_join&amp;quot;           &amp;quot;sql_select&amp;quot;         &amp;quot;sql_semi_join&amp;quot;     
## [193] &amp;quot;sql_set_op&amp;quot;         &amp;quot;sql_subquery&amp;quot;       &amp;quot;sql_translate_env&amp;quot; 
## [196] &amp;quot;src&amp;quot;                &amp;quot;src_df&amp;quot;             &amp;quot;src_local&amp;quot;         
## [199] &amp;quot;src_mysql&amp;quot;          &amp;quot;src_postgres&amp;quot;       &amp;quot;src_sqlite&amp;quot;        
## [202] &amp;quot;src_tbls&amp;quot;           &amp;quot;starts_with&amp;quot;        &amp;quot;starwars&amp;quot;          
## [205] &amp;quot;storms&amp;quot;             &amp;quot;summarise&amp;quot;          &amp;quot;summarise_&amp;quot;        
## [208] &amp;quot;summarise_all&amp;quot;      &amp;quot;summarise_at&amp;quot;       &amp;quot;summarise_each&amp;quot;    
## [211] &amp;quot;summarise_each_&amp;quot;    &amp;quot;summarise_if&amp;quot;       &amp;quot;summarize&amp;quot;         
## [214] &amp;quot;summarize_&amp;quot;         &amp;quot;summarize_all&amp;quot;      &amp;quot;summarize_at&amp;quot;      
## [217] &amp;quot;summarize_each&amp;quot;     &amp;quot;summarize_each_&amp;quot;    &amp;quot;summarize_if&amp;quot;      
## [220] &amp;quot;sym&amp;quot;                &amp;quot;syms&amp;quot;               &amp;quot;tally&amp;quot;             
## [223] &amp;quot;tally_&amp;quot;             &amp;quot;tbl&amp;quot;                &amp;quot;tbl_cube&amp;quot;          
## [226] &amp;quot;tbl_df&amp;quot;             &amp;quot;tbl_nongroup_vars&amp;quot;  &amp;quot;tbl_sum&amp;quot;           
## [229] &amp;quot;tbl_vars&amp;quot;           &amp;quot;tibble&amp;quot;             &amp;quot;top_n&amp;quot;             
## [232] &amp;quot;transmute&amp;quot;          &amp;quot;transmute_&amp;quot;         &amp;quot;transmute_all&amp;quot;     
## [235] &amp;quot;transmute_at&amp;quot;       &amp;quot;transmute_if&amp;quot;       &amp;quot;tribble&amp;quot;           
## [238] &amp;quot;trunc_mat&amp;quot;          &amp;quot;type_sum&amp;quot;           &amp;quot;ungroup&amp;quot;           
## [241] &amp;quot;union&amp;quot;              &amp;quot;union_all&amp;quot;          &amp;quot;vars&amp;quot;              
## [244] &amp;quot;with_order&amp;quot;         &amp;quot;wrap_dbplyr_obj&amp;quot;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Customizing boxplots with ggplot2</title>
      <link>/post/blog/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/blog/</guid>
      <description>&lt;p&gt;Boxplot is probably one of the most common type of graphics. This will show how to customize boxplots.&lt;/p&gt;
&lt;p&gt;You will learn,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how to change the order of labels&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;how to change the colours&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;how to flip coordinates&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step 1: we create a simple data set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Gender &amp;lt;- rep(c(&amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;), times = 3, each = 4)
Quality &amp;lt;- rep(c(&amp;quot;Taste&amp;quot;, &amp;quot;Color of package&amp;quot;, &amp;quot;Capacity&amp;quot;), times = 1, each = 8)
Accepted &amp;lt;- seq(0, 100, by = 100/23)

DF &amp;lt;- data.frame(Gender, Quality, Accepted)
head(DF)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Gender Quality  Accepted
## 1   Male   Taste  0.000000
## 2   Male   Taste  4.347826
## 3   Male   Taste  8.695652
## 4   Male   Taste 13.043478
## 5 Female   Taste 17.391304
## 6 Female   Taste 21.739130&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 2: Generate a simple boxplot with ggplot&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
ggplot(DF, aes(x = Quality, y = Accepted, fill = Gender)) +
  geom_boxplot() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/boxplot_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Step 3: Change the colours, legend position and x-axis order&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(DF, aes(x = Quality, y = Accepted, fill = Gender)) +
  geom_boxplot() +
  scale_fill_manual(values = c(&amp;quot;green&amp;quot;, &amp;quot;orange&amp;quot;)) +
  xlab(&amp;quot;&amp;quot;) +
  theme(legend.position = &amp;quot;top&amp;quot;, legend.title = element_blank()) + 
  scale_x_discrete(limits=c(&amp;quot;Taste&amp;quot;, &amp;quot;Color of package&amp;quot;, &amp;quot;Capacity&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/boxplot_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Step 4: Change the plotting order: first you have to include &lt;code&gt;factor&lt;/code&gt; code to set the order of the levels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DF$Gender_factor &amp;lt;- factor(DF$Gender, levels=c(&amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;))
ggplot(DF, aes(x = Quality, y = Accepted, fill = Gender_factor)) +
  geom_boxplot() +
  scale_fill_manual(values = c(&amp;quot;green&amp;quot;, &amp;quot;orange&amp;quot;)) +
  xlab(&amp;quot;&amp;quot;) +
  theme(legend.position = &amp;quot;top&amp;quot;, legend.title = element_blank()) + 
  scale_x_discrete(limits=c(&amp;quot;Taste&amp;quot;, &amp;quot;Color of package&amp;quot;, &amp;quot;Capacity&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/boxplot_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Step 5: Horizontal bar chart: coord_flip()&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(DF, aes(x = Quality, y = Accepted, fill = Gender)) +
  geom_boxplot() +
  scale_fill_manual(values = c(&amp;quot;green&amp;quot;, &amp;quot;orange&amp;quot;)) +
  xlab(&amp;quot;&amp;quot;) +
  theme(legend.position = &amp;quot;top&amp;quot;, legend.title = element_blank()) + 
  coord_flip()+
  scale_x_discrete(limits=c(&amp;quot;Taste&amp;quot;, &amp;quot;Color of package&amp;quot;, &amp;quot;Capacity&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/boxplot_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;step 6: Change the legend order similar to plot order: under themes &lt;code&gt;fill=guide_legend(reverse=FALSE)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(DF, aes(x = Quality, y = Accepted, fill = Gender)) +
  geom_boxplot() +
  scale_fill_manual(values = c(&amp;quot;green&amp;quot;, &amp;quot;orange&amp;quot;)) +
  xlab(&amp;quot;&amp;quot;) +
  theme(legend.position = &amp;quot;top&amp;quot;, legend.title = element_blank()) + 
  guides(fill=guide_legend(reverse=TRUE)) +
  coord_flip()+
  scale_x_discrete(limits=c(&amp;quot;Taste&amp;quot;, &amp;quot;Color of package&amp;quot;, &amp;quot;Capacity&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/boxplot_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>parallel computing with R</title>
      <link>/post/parallelcomputing/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0800</pubDate>
      
      <guid>/post/parallelcomputing/</guid>
      <description>&lt;p&gt;Working on this..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Types in R</title>
      <link>/post/datatypes/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0800</pubDate>
      
      <guid>/post/datatypes/</guid>
      <description>&lt;p&gt;coming up soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Feature-based Model Selection for Time Series Forecasting</title>
      <link>/talk/isf17-talk/</link>
      <pubDate>Mon, 26 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>/talk/isf17-talk/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many applications require a large number of time series to be forecast. Providing better forecasts for these time series is important in decision and policy making. However, large scale time series data present numerous challenges in modelling and implementation due to
the high dimensionality. It is unlikely that a single method will consistently provides better forecasts across all time series. On the other hand, selecting individual forecast models when the number of series is very large can be extremely challenging. In this paper we propose a classification framework which selects forecast models based on features calculated from the time series. A Random Forest approach is used to develop the classifier. The proposed framework is tested using the M3 data and is compared against several benchmarks and other commonly used approaches of forecasting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A classification framework for forecast-model selection</title>
      <link>/talk/jsm18-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>/talk/jsm18-talk/</guid>
      <description>&lt;p&gt;The background pictures are of free copyright from &lt;a href=&#34;https://pixabay.com/en/photos/presentation/&#34; target=&#34;_blank&#34;&gt;https://pixabay.com/en/photos/presentation/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Associated R package: &lt;a href=&#34;https://github.com/thiyangt/seer&#34; target=&#34;_blank&#34;&gt;seer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Analysing large collections of time series</title>
      <link>/talk/japan18-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>/talk/japan18-talk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Feature-based model selection for time series forecasting</title>
      <link>/talk/ssa17-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>/talk/ssa17-talk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Feature-based model selection for time series forecasting</title>
      <link>/talk/ysc17-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>/talk/ysc17-talk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Meta-learning how to forecast time series</title>
      <link>/talk/isf18-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>/talk/isf18-talk/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A crucial task in time series forecasting is the identification of the most suitable forecasting method. We present a general framework for forecast model selection using meta-learning. A Random Forest is used to predict the best forecasting method using only time series features. The proposed framework has been evaluated using time series from the M1 and M3 competitions, and is shown to yield accurate forecasts comparable to several benchmarks and other commonly used automated approaches of time series forecasting. A key advantage of our algorithm is that the time-consuming part of building the random forest can be handled in advance of the forecasting task.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>seer: R package for feature-based forecast model selection</title>
      <link>/talk/user18-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>/talk/user18-talk/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The seer package provides a novel framework for forecast model selection using time series features. We call this framework FFORMS (Feature-based FORecast Model Selection). The underlying approach involves computing a vector of features from the time series which are then used to select the forecasting model. The model selection process is carried out using a classification algorithm &amp;ndash; we use the time series features as inputs, and the best forecasting algorithm as the output. The classification algorithm can be built in advance of the forecasting exercise (so it is an “offline” procedure). Then, when we have a new time series to forecast, we can quickly compute its features, use the pre-trained classification algorithm to identify the best forecasting model, and produce the required forecasts. Thus, the “online” part of our algorithm requires only feature computation, and the application of a single forecasting model, with no need to estimate large numbers of models within a class, or to carry out a computationally-intensive cross-validation procedure. This framework is compared against several benchmarks and other commonly used forecasting methods.&lt;/p&gt;

&lt;p&gt;Link to git repository: &lt;a href=&#34;https://github.com/thiyangt/seer&#34; target=&#34;_blank&#34;&gt;seer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Large-scale time series forecasting</title>
      <link>/project/largescaleforecasting/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/largescaleforecasting/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Person Re-Identification System For Mobile Devices</title>
      <link>/software/person-re-identification/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/software/person-re-identification/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile visual clothing search</title>
      <link>/software/clothing-search/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/software/clothing-search/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
